{"version":3,"sources":["tools/getCookie.js","store/reducer.js","api/api.js","App.styles.js","store/context.js","components/notificationsList/components/SingleNotification.styles.js","components/notificationsList/components/SingleNotification.jsx","components/notificationsList/NotificationsList.styles.js","components/notificationsList/NotificationsList.jsx","components/spinner/Spinner.styles.js","components/spinner/Spinner.jsx","constants/urls.js","tools/useGetUserId.js","App.jsx","index.js"],"names":["getCookie","name","parts","document","cookie","split","length","pop","shift","actionTypes","reducer","state","action","type","payload","userId","storeUserId","showSpinner","setShowSpinner","notifications","storeNotifications","getRequest","args","a","url","dispatch","actionType","axios","get","withCredentials","response","data","console","log","AppWrapepr","styled","div","ContentWrapper","RefreshText","Context","createContext","NotificationsHeader","TextWrapper","StyledPaper","Paper","SingleNotification","date","text","dt","DateTime","fromISO","toLocal","toFormat","elevation","ListWrapper","NotificationsList","notificationsArray","useContext","map","element","Math","random","SpinnerContainer","SpinnerWrapper","LoadingText","Spinner","CircularProgress","host","urls","GET_USER_ID","GET_USER_NOTIFICATIONS","useGetUserId","useEffect","userIdFromCoolie","App","initialState","useReducer","interval","setInterval","clearInterval","Provider","value","CssBaseline","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2682769e.chunk.js","sourcesContent":["const getCookie = (name) => {\n    const value = '; ' + document.cookie;\n    const parts = value.split('; ' + name + '=');\n    if (parts.length === 2) return parts.pop().split(';').shift();\n};\n\nexport default getCookie;\n","import getCookie from '../tools/getCookie';\n\nexport const actionTypes = {\n    STORE_USER_ID: 'STORE_USER_ID',\n    SET_SHOW_SPINNER: 'SET_SHOW_SPINNER',\n    STORE_NOTIFICATIONS: 'STORE_NOTIFICATIONS',\n};\n\nconst storeUserId = (state, action) => {\n    const userId = getCookie('userId');\n    if (!userId) document.cookie = `userId=${action.payload}`;\n    return {\n        ...state,\n        userId: action.payload,\n    };\n};\n\nconst setShowSpinner = (state, action) => {\n    return {\n        ...state,\n        showSpinner: action.payload,\n    };\n};\n\nconst storeNotifications = (state, action) => {\n    return {\n        ...state,\n        notifications: action.payload,\n    };\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case actionTypes.STORE_USER_ID: {\n            return storeUserId(state, action);\n        }\n\n        case actionTypes.SET_SHOW_SPINNER: {\n            return setShowSpinner(state, action);\n        }\n\n        case actionTypes.STORE_NOTIFICATIONS: {\n            return storeNotifications(state, action);\n        }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import axios from 'axios';\nimport { actionTypes } from '../store/reducer';\n\nexport const getRequest = async (args) => {\n    const { url, dispatch, actionType, showSpinner = true } = args;\n\n    try {\n        if (showSpinner) dispatch({ type: actionTypes.SET_SHOW_SPINNER, payload: true });\n        const response = await axios.get(url, { withCredentials: true });\n        dispatch({ type: actionType, payload: response.data });\n        if (showSpinner) dispatch({ type: actionTypes.SET_SHOW_SPINNER, payload: false });\n    } catch (error) {\n        if (showSpinner) dispatch({ type: actionTypes.SET_SHOW_SPINNER, payload: false });\n        document.cookie = 'userId=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        dispatch({ type: actionTypes.STORE_USER_ID, payload: '' });\n        console.log(error);\n    }\n};\n","import styled from 'styled-components/macro';\n\nexport const AppWrapepr = styled.div`\n    position: relative;\n    height: 100vh;\n    overflow: hidden;\n`;\n\nexport const ContentWrapper = styled.div`\n    padding: 10px;\n`;\n\nexport const RefreshText = styled.div`\n    font-size: 25px;\n    text-align: center;\n`;\n","import { createContext } from 'react';\n\nconst Context = createContext({\n    userId: '',\n    showSpinner: false,\n    notifications: [],\n});\n\nexport default Context;\n","import { Paper } from '@material-ui/core';\nimport styled from 'styled-components/macro';\n\nexport const NotificationsHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-bottom: 1px solid black;\n    padding: 10px;\n`;\n\nexport const TextWrapper = styled.div`\n    padding: 10px;\n    font-size: 16px;\n`;\n\nexport const StyledPaper = styled(Paper)`\n    min-height: 150px;\n    margin-top: 10px;\n    width: 50%;\n`;\n","import { DateTime } from 'luxon';\nimport { NotificationsHeader, TextWrapper, StyledPaper } from './SingleNotification.styles';\n\nconst SingleNotification = ({ date, text }) => {\n    const dt = DateTime.fromISO(date).toLocal().toFormat('HH:MM:ss');\n    return (\n        <StyledPaper elevation={3}>\n            <NotificationsHeader>\n                <div>Notification</div>\n                <div>{dt}</div>\n            </NotificationsHeader>\n            <TextWrapper>{text}</TextWrapper>\n        </StyledPaper>\n    );\n};\n\nexport default SingleNotification;\n","import styled from 'styled-components/macro';\n\nexport const ListWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n","import { useContext } from 'react';\nimport Context from '../../store/context';\nimport SingleNotification from './components/SingleNotification';\nimport { ListWrapper } from './NotificationsList.styles';\n\nconst NotificationsList = () => {\n    const { state } = useContext(Context);\n    const { notifications } = state;\n\n    const notificationsArray = notifications.map((element) => <SingleNotification key={`${element.date}${Math.random()}`} text={element.text} date={element.date} />);\n\n    return <ListWrapper>{notificationsArray}</ListWrapper>;\n};\n\nexport default NotificationsList;\n","import styled from 'styled-components/macro';\n\nexport const SpinnerContainer = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgba(0, 0, 0, 0.3);\n`;\n\nexport const SpinnerWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const LoadingText = styled.div`\n    color: #1976d2;\n    margin-bottom: 10px;\n`;\n","import { CircularProgress } from '@material-ui/core';\nimport { LoadingText, SpinnerContainer, SpinnerWrapper } from './Spinner.styles';\n\nconst Spinner = () => {\n    return (\n        <SpinnerContainer>\n            <SpinnerWrapper>\n                <LoadingText>Loading...</LoadingText>\n                <CircularProgress />\n            </SpinnerWrapper>\n        </SpinnerContainer>\n    );\n};\n\nexport default Spinner;\n","const host = 'http://notifications.mctf-test.serega6531.ru';\n\nexport const urls = {\n    GET_USER_ID: `${host}/backend/getUserId`,\n    GET_USER_NOTIFICATIONS: `${host}/backend/getNotifications?userId=`,\n};\n","import { useEffect } from 'react';\nimport { getRequest } from '../api/api';\nimport { urls } from '../constants/urls';\nimport { actionTypes } from '../store/reducer';\nimport getCookie from './getCookie';\n\nconst useGetUserId = (dispatch, userId) => {\n    useEffect(() => {\n        if (!userId) {\n            const userIdFromCoolie = getCookie('userId');\n\n            if (userIdFromCoolie) {\n                dispatch({ type: actionTypes.STORE_USER_ID, payload: userIdFromCoolie });\n            } else {\n                getRequest({ url: urls.GET_USER_ID, dispatch, actionType: actionTypes.STORE_USER_ID });\n            }\n        }\n\n        // eslint-disable-next-line\n    }, [userId]);\n};\n\nexport default useGetUserId;\n","import { CssBaseline } from '@material-ui/core';\nimport { useContext, useEffect, useReducer } from 'react';\nimport { getRequest } from './api/api';\nimport { AppWrapepr, ContentWrapper, RefreshText } from './App.styles';\nimport NotificationsList from './components/notificationsList/NotificationsList';\nimport Spinner from './components/spinner/Spinner';\nimport { urls } from './constants/urls';\nimport Context from './store/context';\nimport reducer, { actionTypes } from './store/reducer';\nimport useGetUserId from './tools/useGetUserId';\n\nconst App = () => {\n    const initialState = useContext(Context);\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const { userId, showSpinner, notifications } = state;\n    useGetUserId(dispatch, userId);\n\n    useEffect(() => {\n        if (userId) {\n            getRequest({ url: `${urls.GET_USER_NOTIFICATIONS}${userId}`, dispatch, actionType: actionTypes.STORE_NOTIFICATIONS });\n        }\n    }, [userId]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (userId) {\n                getRequest({ url: `${urls.GET_USER_NOTIFICATIONS}${userId}`, dispatch, actionType: actionTypes.STORE_NOTIFICATIONS });\n            }\n        }, 30000);\n\n        return () => clearInterval(interval);\n    }, [userId]);\n\n    return (\n        <Context.Provider value={{ state, dispatch }}>\n            <AppWrapepr>\n                <CssBaseline />\n                {showSpinner && <Spinner />}\n                <ContentWrapper>\n                    <RefreshText>Auto-refresh every 30 seconds</RefreshText>\n                    {notifications.length > 0 && <NotificationsList />}\n                </ContentWrapper>\n            </AppWrapepr>\n        </Context.Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}